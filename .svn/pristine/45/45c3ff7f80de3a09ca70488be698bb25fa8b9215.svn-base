package com.wtwd.sys.appinterfaces.innerw;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.logging.Log;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.wtwd.common.lang.Tools;
import com.godoing.rose.lang.DataMap;
import com.godoing.rose.lang.SystemException;
import com.godoing.rose.log.LogFactory;
import com.wtwd.common.config.ServiceBean;
import com.wtwd.common.http.BaseAction;
import com.wtwd.common.lang.Constant;
import com.wtwd.sys.innerw.liufeng.domain.WSuggestion;
import com.wtwd.sys.innerw.liufeng.domain.logic.WSuggestionFacade;
import com.wtwd.sys.innerw.wappusers.domain.WappUsers;
import com.wtwd.sys.innerw.wappusers.domain.logic.WappUsersFacade;

public class WTAppFeedAction extends BaseAction {
	
	private JSONObject json = null;
	private Date time_stamp = null;
	Log logger = LogFactory.getLog(WTAppFeedAction.class);
	String loginout = "{\"request\":\"SERVER_LOGINOUT_RE\"}";

	
//	public ActionForward execute(ActionMapping mapping, ActionForm form,
//			HttpServletRequest request, HttpServletResponse response)
//	throws Exception {
//		request.setCharacterEncoding("UTF-8");
//		String href= request.getServletPath();
//		Date start = new Date();
//		json = new JSONObject();
//		try{
//			ServletInputStream input = request.getInputStream();
//			BufferedReader reader = new BufferedReader(new InputStreamReader(input));
//			StringBuffer sb = new StringBuffer();
//			String online = "";
//			while((online = reader.readLine()) != null){
//				sb.append(online);
//			}
//			
//			
//			JSONObject object = JSONObject.fromObject(sb.toString());
//			String cmd = object.getString("cmd");
//			int user_id = object.getInt("user_id");
//			String app_token = Tools.getSafeStringFromJson(object, "app_token");
//			
//			if ( ( result = verifyUserId(String.valueOf(user_id)) ) 
//					== Constant.SUCCESS_CODE ) {
//				if ( ( result = verifyAppToken(String.valueOf(user_id), 
//					app_token)) == Constant.SUCCESS_CODE ) {
//					if (cmd.equals("add")) {	//APP增加用户反馈
//						proAdd(object);
//						//result = Constant.SUCCESS_CODE;													
//					} else {
//						result = Constant.ERR_INVALID_PARA;								
//					}
//				}
//			}
//			
//		}catch(Exception e){
//			e.printStackTrace();	
//			StringBuffer sb = new StringBuffer();
//			Writer writer = new StringWriter();
//			PrintWriter printWriter = new PrintWriter(writer);
//			Throwable cause = e.getCause();		
//			while (cause != null) {
//				cause.printStackTrace(printWriter);
//				cause = cause.getCause();
//			}
//			printWriter.close();
//			String resultSb = writer.toString();
//			sb.append(resultSb);
//			
//			logger.error(e);
//			result = Constant.EXCEPTION_CODE;
//			json.put(Constant.EXCEPTION, sb.toString());
//		}
//		
//		json.put("request", href);
//		json.put(Constant.RESULTCODE, result);
//		response.setCharacterEncoding("UTF-8");	
//		response.getWriter().write(json.toString());
//		
//		
//		return null;
//	}	

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		request.setCharacterEncoding("UTF-8");
		String href= request.getServletPath();
		json = new JSONObject();
		try {
			if( ServletFileUpload.isMultipartContent(request) ) {//有图片
				String uploadDir = request.getSession(true).getServletContext().getRealPath("/images/");
				
				File fileDir = new File(uploadDir);
				if (!fileDir.exists() && !fileDir.isDirectory() ) {
					fileDir.mkdirs();
				}
					
				DiskFileItemFactory factory = new DiskFileItemFactory();
				ServletFileUpload upload = new ServletFileUpload(factory);
				factory.setSizeThreshold(5000*1024*1024);
				upload.setHeaderEncoding("UTF-8");
				
				List<FileItem> list = upload.parseRequest(request);
				ProFileItem(uploadDir, list);
			}else{//无图片
				SaveSuggestionInfo(request);
			}
		} catch (Exception e) {
			e.printStackTrace();	
			StringBuffer sb = new StringBuffer();
			Writer writer = new StringWriter();
			PrintWriter printWriter = new PrintWriter(writer);
			Throwable cause = e.getCause();		
			while (cause != null) {
				cause.printStackTrace(printWriter);
				cause = cause.getCause();
			}
			printWriter.close();
			String resultSb = writer.toString();
			sb.append(resultSb);
			
			logger.error(e);
			result = Constant.EXCEPTION_CODE;
			json.put(Constant.EXCEPTION, sb.toString());
		}
		
		json.put("request", href);
		json.put(Constant.RESULTCODE, result);
		response.setCharacterEncoding("UTF-8");	
		response.getWriter().write(json.toString());

		
		return null;
	}
	
	void proAdd(JSONObject object) {
		Tools tls = new Tools();
		
		WSuggestionFacade suggestFacade = ServiceBean.getInstance().getwSuggestionFacade();
		WSuggestion ws = new WSuggestion();
		int user_id = object.getInt("user_id");
		String msg = tls.getSafeStringFromJson(object, "msg");
		
		ws.setUser_id(String.valueOf(user_id) );
		//ws.setDate_time(new Date());
		if ( Constant.timeUtcFlag )
			ws.setDate_time(tls.getUtcDateStrNowDate());					
		else
			ws.setDate_time(new Date());
		
		if(msg != null && !"".equals(msg)){
			ws.setMsg(msg);
		}
		int res = suggestFacade.insertUserSuggestion(ws);
		if(res > 0){
			result = Constant.SUCCESS_CODE;
		}else{
			result = Constant.FAIL_CODE;
		}
	}
	
	//无图片请求
	void SaveSuggestionInfo(HttpServletRequest request) throws Exception{
		Tools tls = new Tools();	
		
		ServletInputStream input = request.getInputStream();
		BufferedReader reader = new BufferedReader(new InputStreamReader(input,"UTF-8"));
		StringBuffer sb = new StringBuffer();
		String online = "";
		while((online = reader.readLine()) != null){
			sb.append(online);
		}
		
		JSONObject object = JSONObject.fromObject(sb.toString());
		String cmd = object.getString("cmd");
		int user_id = object.getInt("user_id");
		String app_token = tls.getSafeStringFromJson(object, "app_token");
		
		if ( ( result = verifyUserId(String.valueOf(user_id)) ) 
				== Constant.SUCCESS_CODE ) {
			if ( ( result = verifyAppToken(String.valueOf(user_id), 
				app_token)) == Constant.SUCCESS_CODE ) {
				if (cmd.equals("add")) {	//APP增加用户反馈
					proAdd(object);
				} else {
					result = Constant.ERR_INVALID_PARA;								
				}
			}
		}
	}
	
	
	private void ProFileItem(String uploadDir, List<FileItem> list)
			throws Exception {
		String cmd = null;
		String app_token = null;
		int user_id = -1;
		String msg = null;
		Tools tls = new Tools();

		for (FileItem item:list) {
			if (item.isFormField()) {
				String name = item.getFieldName();
				
				if ("app_token".equals(name)) {
					app_token = item.getString("UTF-8");							
				} else if ("user_id".equals(name)) {
					user_id = Integer.parseInt(item.getString("UTF-8").trim());
				} else if ("msg".equals(name)) {
					msg = item.getString("UTF-8");
				} else if ("cmd".equals(name)) {
					cmd = item.getString("UTF-8");
				}
				
			} else {
				time_stamp = tls.getUtcDateStrNowDate();	//new Date(); 
				if ("add".equals(cmd)) {
					WSuggestionFacade suggestFacade = ServiceBean.getInstance().getwSuggestionFacade();
					String fileName = proAppHeadFileItem(uploadDir + "/app/msg/", app_token, user_id,item);
					
					WSuggestion ws = new WSuggestion();
					ws.setUser_id(String.valueOf(user_id));
					//ws.setDate_time(new Date());
					if ( Constant.timeUtcFlag )
						ws.setDate_time(tls.getUtcDateStrNowDate());					
					else
						ws.setDate_time(new Date());
					
					if(msg != null && !"".equals(msg)){
						ws.setMsg(msg);
					}
					ws.setPhoto(fileName);
					int res = suggestFacade.insertUserSuggestion(ws);
					if(res > 0){
						result = Constant.SUCCESS_CODE;
					}else{
						result = Constant.FAIL_CODE;
					}
					
				} else {
					result = Constant.ERR_INVALID_PARA;
				}
				return;
			}
		}
		
		result = Constant.ERR_INVALID_PARA;
	}
	
	private String proAppHeadFileItem(String uploadDir, String app_token,
			int user_id, FileItem item) throws Exception {
		String filename = null;
		if ( verifyUserRight(user_id, app_token) != Constant.SUCCESS_CODE )								
			result = Constant.ERR_USER_RIGHT;	        
		else {					
			String fileparaname = item.getName();
			fileparaname = fileparaname.substring(fileparaname.lastIndexOf("/") + 1);
			
			String sufixname = fileparaname.substring(fileparaname.lastIndexOf(".") + 1);
			filename = new String ("msg" + time_stamp.getTime() + "." + sufixname);;

			StringBuffer sbRealPath = new StringBuffer();  
            sbRealPath.append(uploadDir).append(filename);
            
            //写入文件  
            File file = new File(sbRealPath.toString());  
            item.write(file);
			
			result = Constant.SUCCESS_CODE;
		}
		return filename;
	}
	
	private int verifyUserRight(int user_id, String token) throws SystemException {
		WappUsers vo = new WappUsers();
		WappUsersFacade fd = ServiceBean.getInstance().getWappUsersFacade();
		vo.setCondition("user_id=" + user_id + " and app_token='" + token + "'");
		List<DataMap> list = fd.getWappUsers(vo);
		if (list.size() == 1)
		{
			return Constant.SUCCESS_CODE;
		}
		return Constant.ERR_USER_RIGHT;
	}
	
}
