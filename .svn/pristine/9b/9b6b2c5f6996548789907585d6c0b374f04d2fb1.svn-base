package com.wtwd.pet.app.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.LinkedHashMap;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.log4j.Logger;

import com.alibaba.fastjson.JSONObject;

public class HttpRequest {
	
	Log logger = LogFactory.getLog(HttpRequest.class);
	
	/**
	 * ��ָ��URL����GET����������
	 * @param url���͵�URL
	 * @param param�������
	 * @return ��Ӧ���
	 */
	public static String sendGet(String url, String param){
		String urlNameString = url + "?" + param;
		String returnParams = urlReturnParams(urlNameString);
		
		return returnParams;
	}

	
	public static String sendPost(String urlStr, String param, String referer, String encoding) {
		
		String line = "";
		//StringBuilder sb = new StringBuilder();
		StringBuffer sb = new StringBuffer();
		HttpURLConnection httpConn = null;
		//OutputStreamWriter out = null;
		BufferedReader in = null;
		
		try {
			URL url = new URL(urlStr);
			System.out.println("---url : " + urlStr + " --- post data :" + param);
			
			httpConn = (HttpURLConnection) url.openConnection();
			//POST 
			httpConn.setDoInput(true);
			httpConn.setDoOutput(true);
			httpConn.setRequestMethod("POST");
			
			if (referer != null) {
				httpConn.setRequestProperty("referer", referer);
			}
			
			httpConn.setRequestProperty("accept", "*/*");
			httpConn.setRequestProperty("connection", "Keep-Alive");
			httpConn.setRequestProperty("user-agent", 
					"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
			httpConn.setRequestProperty("Content-Type", "application/json");
			
			//httpConn.setConnectTimeout(5000);
			
			httpConn.connect();
			
			httpConn.getOutputStream().write(param.getBytes());
			httpConn.getOutputStream().flush();
			httpConn.getOutputStream().close();
//			out = new OutputStreamWriter(httpConn.getOutputStream(),encoding);
//			out.write(param);
//			out.flush();
			
			if (httpConn.getResponseCode() != 200) {
				System.out.println("error: " + httpConn.getResponseMessage());
				in = new BufferedReader(new InputStreamReader(httpConn.getErrorStream(),encoding));
			} else {
				in = new BufferedReader(new InputStreamReader(httpConn.getInputStream(),encoding));
			}
			
			while ((line = in.readLine()) != null) {
				sb.append(line).append('\n');
			}
			//httpConn.disconnect();
			return sb.toString();
					
		} catch (Exception e) {
			//httpConn.disconnect();
			System.out.println(e.getMessage());
			return sb.toString();
		} finally {
			try {
				if (httpConn != null) {
					httpConn.disconnect();
				}
//				if (out != null) {
//					out.close();
//				}
				if (in != null) {
					in.close();
				}
			} catch (IOException ex) {
				ex.printStackTrace();	
			}
			//return sb.toString();
		}
		//Just debug
		//System.out.println("---getPost return : " + sb.toString());
		//return sb.toString();
	}
	
	/**
	 * ���Զ�λ
	 */
	public static String sendGetToGaoDe(String url, LinkedHashMap<String,String> map){		
		String urlNameString = url + paramsTransToUrl(map);
		LogFactory.getLog(HttpRequest.class).info("urlNameString="+urlNameString);
		String returnParams = urlReturnParams(urlNameString);
		
		return returnParams;
	}
	
	
	
	public static String paramsTransToUrl(LinkedHashMap<String,String> map){
        StringBuffer params = new StringBuffer("?");
		
		for(String key : map.keySet()){
			if(!params.toString().equals("?")){
				params.append("&");
			}
			params.append(key).append("=").append(map.get(key));
		}
		return params.toString();
	}
//	@SuppressWarnings("finally")
	public static String urlReturnParams(String urlNameString){
		StringBuffer sb = new StringBuffer();
		BufferedReader in = null;
		HttpURLConnection httpConnect = null;
		
		try {
			URL realUrl = new URL(urlNameString);
			//����URL֮�������
			//URLConnection connection = realUrl.openConnection();
			//HttpURLConnection httpConnect = (HttpURLConnection)connection;
			httpConnect = (HttpURLConnection) realUrl.openConnection();
			//����ͨ�õ���������
			httpConnect.setRequestProperty("accept", "*/*");
			httpConnect.setRequestProperty("connection", "Keep-Alive");
			httpConnect.setRequestProperty("user-agent", 
					"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
			//����ʵ������
			httpConnect.connect();
			System.out.println("---resquest url string--- " + urlNameString);
			//��ȡ������Ӧͷ�ֶ�
//			Map<String, List<String>> map = connection.getHeaderFields();
			//����BufferedReader����������ȡURL����Ӧ
			int code = httpConnect.getResponseCode();
			if(code == 200){
				in = new BufferedReader(new InputStreamReader(httpConnect.getInputStream()));
				String line;
				while((line = in.readLine()) != null){
					sb.append(line);
				}				
				in.close();
				LogFactory.getLog(HttpRequest.class).info("---returnString---"+sb.toString());
				LogFactory.getLog(HttpRequest.class).debug("---returnString---"+sb.toString());
				System.out.println("---returnString---"+sb.toString());
			}else{
				sb.append("-1");
			}
			
		}catch (Exception e) {
			// TODO Auto-generated catch block
			sb.append("-1");
//			e.printStackTrace();
		}finally{
			//return sb.toString();
			try {
				if (httpConnect != null) {
					httpConnect.disconnect();
		}	
				
				if (in != null) {
					in.close();
				}
			} catch (IOException ex) {
				ex.printStackTrace();	
			}
		}	
		//Kevin.Liu added 20160904 for debug 
		System.out.println("--- urlReturn Params : " + sb.toString());
		return sb.toString();
	}
}
