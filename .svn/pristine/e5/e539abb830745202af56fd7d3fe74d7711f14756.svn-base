package com.wtwd.sys.appinterfaces;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.godoing.rose.lang.DataMap;
import com.wtwd.common.config.ServiceBean;
import com.wtwd.common.http.BaseAction;
import com.wtwd.common.lang.Constant;
import com.wtwd.sys.deviceactiveinfo.domain.DeviceActiveInfo;
import com.wtwd.sys.mediainfo.domain.MediaInfo;

public class userSendMediaAction extends BaseAction{
	
	Log logger = LogFactory.getLog(userSendMediaAction.class);
	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		request.setCharacterEncoding("UTF-8");
		JSONObject json = new JSONObject();
		String href= request.getServletPath();
		Date start = new Date();
		try{
			ServletInputStream input = request.getInputStream();
			BufferedReader reader = new BufferedReader(new InputStreamReader(input));
			StringBuffer sb = new StringBuffer();
			String online = "";
			while((online = reader.readLine()) != null){
				sb.append(online);
			}
			JSONObject object = JSONObject.fromObject(sb.toString());
			String userId = object.has("user_id") ? object.getString("user_id"):"0";
			String deviceImei = object.has("device_imei") ? object.getString("device_imei"):"0";
			String msgContent = object.has("msg_content") ? object.getString("msg_content"):"0";
			String timeLength = object.has("time_length") ? object.getString("time_length"):"0";
			String belongProject = object.has("belong_project") ? object.getString("belong_project"):"0";
			
			DeviceActiveInfo da = new DeviceActiveInfo();
			da.setCondition("device_imei='"+deviceImei+ "' and belong_project='"+belongProject+"'");
			List<DataMap> daList = ServiceBean.getInstance().getDeviceActiveInfoFacade().getDeviceActiveInfo(da);
			if(daList.size() > 0){
				Integer deviceId = (Integer)daList.get(0).getAt("id");
				
				String path = request.getSession(true).getServletContext().getRealPath("/upload/device/media/") + deviceId;				
				
				String fileName = Constant.getUniqueCode(String.valueOf(deviceId)) + ".amr";
				byte[] content = Base64.decodeBase64(msgContent);
				logger.info("userMsgContent----------------"+msgContent);
				logger.info("userbase64Content--------------"+content);
				Constant.createFileContent(path, fileName, content);
				
				String url = "http://" +getServerName() +":";
				int port = request.getServerPort();
				String downloadpath = request.getContextPath() + "/upload/device/media/" + deviceId + "/" +fileName;
				
				msgContent = Constant.getDownloadPath(url, String.valueOf(port), downloadpath);
				
				MediaInfo vo = new MediaInfo();
				vo.setFromId(userId);
				vo.setToId(deviceImei);
				vo.setMsgContent(msgContent);
				vo.setSendType("0");
				vo.setSendTime(new Date());
				vo.setTimeLength(timeLength);
				vo.setBelongProject(belongProject);
				ServiceBean.getInstance().getMediaInfoFacade().insertMediaInfo(vo);
				result = Constant.SUCCESS_CODE;
			}
			insertVisit(href, belongProject, deviceImei, 0,start,new Date());
		}catch(Exception e){
			e.printStackTrace();	
			StringBuffer sb = new StringBuffer();
			Writer writer = new StringWriter();
			PrintWriter printWriter = new PrintWriter(writer);
			Throwable cause = e.getCause();		
			while (cause != null) {
				cause.printStackTrace(printWriter);
				cause = cause.getCause();
			}
			printWriter.close();
			String resultSb = writer.toString();
			sb.append(resultSb);
			
			logger.error(e);
			result = Constant.EXCEPTION_CODE;
			json.put(Constant.EXCEPTION, sb.toString());
		}
		json.put("request", href);
		json.put(Constant.RESULTCODE, result);
		response.setCharacterEncoding("UTF-8");	
		response.getWriter().write(json.toString());
		
		return null;
	}

	public String getServerName() throws Exception {
		String serverName = "";
		Properties pros = new Properties();
		pros.load(this.getClass().getClassLoader().getResourceAsStream("server.properties"));
		serverName = pros.getProperty("servername");
		return serverName;
	}

}
