package com.wtwd.sys.appinterfaces;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.logging.Log;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.godoing.rose.lang.DataMap;
import com.godoing.rose.log.LogFactory;
import com.twilio.Twilio;
import com.twilio.base.ResourceSet;
import com.twilio.rest.preview.wireless.Sim;
import com.wtwd.common.config.ServiceBean;
import com.wtwd.common.http.BaseAction;
import com.wtwd.common.lang.Constant;
import com.wtwd.sys.checkinfo.domain.CheckInfo;
import com.wtwd.sys.deviceactiveinfo.domain.DeviceActiveInfo;
import com.wtwd.sys.phoneinfo.domain.PhoneInfo;

public class doSimOperateAction extends BaseAction {

	Log logger = LogFactory.getLog(doSimOperateAction.class);
	public static final String ACCOUNT_SID = "AC08d153f6d0fb9a2135f0edd5614229f6";
	public static final String AUTH_TOKEN = "5fc4e38b694dfd9a530871996a4a038e";

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		request.setCharacterEncoding("UTF-8");
		String href = request.getServletPath();
		Date start = new Date();
		JSONObject json = new JSONObject();
		try {
			ServletInputStream input = request.getInputStream();
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					input));
			StringBuffer sb = new StringBuffer();
			String online = "";
			while ((online = reader.readLine()) != null) {
				sb.append(online);
			}
			JSONObject object = JSONObject.fromObject(sb.toString());
			String imei = object.getString("imei");

			PhoneInfo po = new PhoneInfo();
			po.setCondition("device_imei ='" + imei + "' limit 1");

			List<DataMap> listP = ServiceBean.getInstance()
					.getPhoneInfoFacade().getPWdeviceActiveInfo(po);
			String iccid = "";
			if (listP.size() > 0) {
				iccid = listP.get(0).get("iccid") + "";
				if (iccid.length() > 0) {
					String cardStatus = object.getString("status");
					json.put("imei", imei);
					json.put("iccid", iccid);
					json.put("status", cardStatus);
					DeviceActiveInfo vo = new DeviceActiveInfo();
					// 0 停止 1激活
					vo.setCondition("iccid ='" + iccid + "' limit 1");
					String sid = "";
					List<DataMap> list = ServiceBean.getInstance()
							.getDeviceActiveInfoFacade().getSsidInfo(vo);

					if (list.size() <= 0) {
						Twilio.init(ACCOUNT_SID, AUTH_TOKEN);
						ResourceSet<Sim> sims = Sim.reader().read();
						for (Sim sim : sims) {
							if (iccid.equals(sim.getIccid())) {
								sid = sim.getSid();
								vo.setSid(sid);
								vo.setIccid(iccid);
								vo.setCardStatus(cardStatus);
								vo.setFriendlyName(sim.getFriendlyName());
								vo.setRatePlan(sim.getRatePlanSid());
								vo.setCreateTime(sim.getDateCreated() + "");
								vo.setUpdateTime(sim.getDateUpdated() + "");
								ServiceBean.getInstance()
										.getDeviceActiveInfoFacade()
										.insertSmsInfo(vo);

								if (cardStatus.equals("0")) {
									// 就是注销
									Twilio.init(ACCOUNT_SID, AUTH_TOKEN);
									Sim updatedSim = Sim.updater(sid)
											.setStatus("inactive").update();
									// active 是设备活跃 inactive 使设备不活跃
								} else if (cardStatus.equals("1")) {
									// 激活
									Twilio.init(ACCOUNT_SID, AUTH_TOKEN);
									Sim updatedSim = Sim.updater(sid)
											.setRatePlan("data100")
											.setStatus("active").update();
								}
								break;
							} else {
								vo.setCondition("iccid ='" + sim.getIccid()
										+ "' limit 1");
								List<DataMap> listSelect = ServiceBean
										.getInstance()
										.getDeviceActiveInfoFacade()
										.getSsidInfo(vo);
								if (listSelect.size() <= 0) {
									vo.setSid(sim.getSid());
									vo.setIccid(sim.getIccid());
									vo.setCardStatus(sim.getStatus().equals(
											"active") ? "1" : "0");
									vo.setFriendlyName(sim.getFriendlyName());
									vo.setRatePlan(sim.getRatePlanSid());
									vo.setCreateTime(sim.getDateCreated() + "");
									vo.setUpdateTime(sim.getDateUpdated() + "");
									ServiceBean.getInstance()
											.getDeviceActiveInfoFacade()
											.insertSmsInfo(vo);
								} else {
									vo.setCondition("iccid ='" + sim.getIccid()
											+ "'");
									vo.setUpdateTime(sim.getDateUpdated() + "");
									vo.setRatePlan(sim.getRatePlanSid());
									ServiceBean.getInstance()
											.getDeviceActiveInfoFacade()
											.updateDeviceSmsInfo(vo);
								}

							}
						}
						result = 1;
					} else {
						sid = list.get(0).get("sid") + "";
						if (cardStatus.equals("0")) {
							// 就是注销
							Twilio.init(ACCOUNT_SID, AUTH_TOKEN);
							Sim updatedSim = Sim.updater(sid)
									.setStatus("inactive").update();
							// active 是设备活跃 inactive 使设备不活跃
						} else if (cardStatus.equals("1")) {
							// 激活
							Twilio.init(ACCOUNT_SID, AUTH_TOKEN);
							Sim updatedSim = Sim.updater(sid)
									.setRatePlan("data100").setStatus("active")
									.update();
						}
						vo.setCardStatus(cardStatus);
						vo.setCondition("iccid ='" + iccid + "'");
						ServiceBean.getInstance().getDeviceActiveInfoFacade()
								.updateDeviceSmsInfo(vo);
						result = 1;
					}
				} else {
					logger.info("iccid为空");
					result = 2;
				}
			} else {
				logger.info("未查到对应的IMEI--");
				result = 0;
			}
			json.put("request", href);
		} catch (Exception e) {
			e.printStackTrace();
			StringBuffer sb = new StringBuffer();
			Writer writer = new StringWriter();
			PrintWriter printWriter = new PrintWriter(writer);
			Throwable cause = e.getCause();
			while (cause != null) {
				cause.printStackTrace(printWriter);
				cause = cause.getCause();
			}
			printWriter.close();
			String resultSb = writer.toString();
			sb.append(resultSb);

			logger.error(e);
			result = Constant.EXCEPTION_CODE;
			json.put(Constant.EXCEPTION, sb.toString());
		}
		json.put(Constant.RESULTCODE, result);
		response.setCharacterEncoding("UTF-8");
		response.getWriter().write(json.toString());
		return null;
	}

}
