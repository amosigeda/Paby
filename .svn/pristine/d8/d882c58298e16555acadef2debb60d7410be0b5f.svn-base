package com.wtwd.sys.interfaces;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.logging.Log;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.godoing.rose.lang.DataMap;
import com.godoing.rose.log.LogFactory;
import com.wtwd.common.config.ServiceBean;
import com.wtwd.common.http.BaseAction;
import com.wtwd.common.lang.Constant;
import com.wtwd.sys.relativecallinfo.domain.RelativeCallInfo;
import com.wtwd.sys.relativecallinfo.domain.logic.RelativeCallInfoFacade;

public class msgDeviceFamilyPhoneAction extends BaseAction{
	
	Log logger = LogFactory.getLog(msgDeviceFamilyPhoneAction.class);
	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		request.setCharacterEncoding("UTF-8");
		Date start = new Date();
		JSONObject json = new JSONObject();
		String serieNo = request.getParameter("serie_no");
		String belongProject = request.getParameter("b_g");
		RelativeCallInfo vo = new RelativeCallInfo();
		RelativeCallInfoFacade facade = ServiceBean.getInstance().getRelativeCallInfoFacade();
		String href= request.getServletPath();
//		String resultType = request.getParameter("result_type");//????豸????????????????????
		JSONArray arr = new JSONArray();
		try{
			if(serieNo != null && !serieNo.equals("")){
				StringBuffer sb = new StringBuffer();
				sb.append("serie_no = '"+serieNo+"'");				
				if(belongProject != null && !"".equals(belongProject)){					
					sb.append(" and belong_project='"+belongProject+"'");
				}
				vo.setCondition(sb.toString());
				List<DataMap> list = facade.getRelativeCallInfo(vo);
				
				JSONObject object = new JSONObject();
				int length = list.size();
				for(int i=0;i<length;i++){
					object.accumulate("type", Integer.parseInt((String)list.get(i).getAt("status")));
					object.accumulate("family_id", list.get(i).getAt("id"));
					object.accumulate("family_type", Integer.parseInt((String)list.get(i).getAt("relative_type")));
					object.accumulate("family_name", list.get(i).getAt("nick_name"));
					object.accumulate("family_phone", list.get(i).getAt("phone_number"));
					arr.add(object);
					object.clear();
				}
				vo.setStatus("0");
				ServiceBean.getInstance().getRelativeCallInfoFacade()
						.updateRelativeCallInfoStatus(vo);
				
				
				result = Constant.SUCCESS_CODE;
			}
			
			logger.info(serieNo+"=亲情号码="+json.toString());
			insertVisit(href, belongProject, serieNo, 1,start,new Date());
		}catch(Exception e){
			e.printStackTrace();	
			StringBuffer sb = new StringBuffer();
			Writer writer = new StringWriter();
			PrintWriter printWriter = new PrintWriter(writer);
			Throwable cause = e.getCause();		
			while (cause != null) {
				cause.printStackTrace(printWriter);
				cause = cause.getCause();
			}
			printWriter.close();
			String resultSb = writer.toString();
			sb.append(resultSb);
			
			logger.error(e);
			result = Constant.EXCEPTION_CODE;
		}
		json.put("request", href);
		json.put(Constant.RESULTCODE, result);
		json.put("family_group", arr);		
		response.setCharacterEncoding("UTF-8");
		response.getWriter().write(json.toString());
		
		return null;
	}

}
