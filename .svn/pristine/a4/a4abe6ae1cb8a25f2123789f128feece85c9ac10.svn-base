package com.wtwd.sys.checkinfo.action;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import java.util.Properties;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.logging.Log;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.upload.FormFile;

import com.godoing.rose.http.common.HttpTools;
import com.godoing.rose.http.common.Result;
import com.godoing.rose.lang.DataList;
import com.godoing.rose.lang.DataMap;
import com.godoing.rose.lang.SystemException;
import com.godoing.rose.log.LogFactory;
import com.sinaapp.msdxblog.apkUtil.utils.ApkUtil;
import com.wtwd.common.config.Config;
import com.wtwd.common.config.ServiceBean;
import com.wtwd.common.http.BaseAction;
import com.wtwd.common.lang.CommUtils;
import com.wtwd.sys.checkinfo.domain.CheckInfo;
import com.wtwd.sys.checkinfo.domain.logic.CheckInfoFacade;
import com.wtwd.sys.checkinfo.form.CheckInfoForm;
import com.wtwd.sys.projectinfo.domain.ProjectInfo;

public class CheckInfoAction extends BaseAction{
	Log logger = LogFactory.getLog(CheckInfoAction.class);
	
	public ActionForward queryCheckInfo(ActionMapping mapping, ActionForm actionForm,HttpServletRequest request,HttpServletResponse response) throws Exception {
		Date start = new Date();
		String href = request.getServletPath();
		Result result = new Result();
		List<DataMap> list = null;
		CheckInfoFacade info = ServiceBean.getInstance().getCheckInfoFacade();
		String belongProject = request.getParameter("belongProject");
		try{
			CheckInfoForm form = (CheckInfoForm)actionForm;
			CheckInfo vo = new CheckInfo();
			BeanUtils.copyProperties(vo,form);
			if(belongProject != null && !"".equals(belongProject)){
				vo.setCondition("belong_project='"+belongProject+"'");
			}
			list = info.getCheckInfo(vo);
			/*设置化排序字段*/
			if(list.size() > 0){
				request.setAttribute("checkInfo", list.get(0));
			}else{
				request.setAttribute("checkInfo", null);
			}
			
			ProjectInfo projectInfo = new ProjectInfo();
			List<DataMap> projectList = ServiceBean.getInstance().getProjectInfoFacade().getProjectInfo(projectInfo);
			request.setAttribute("projectList", projectList);
		}catch(Exception e){
			e.printStackTrace();
			logger.debug(request.getQueryString() + "  " + e);
			result.setBackPage(Config.ABOUT_PAGE);/*这里为管理页面，所以出错后跳转到系统默认页面*/
			if(e instanceof SystemException){/*对已知异常进行解析*/
				result.setResultCode(((SystemException)e).getErrCode());
				result.setResultType(((SystemException)e).getErrType());
			}else{/*对未知异常进行解析，并全部定义成未知异常*/
				result.setResultCode("noKnownException");
				result.setResultType("sysRunException");
			}
		}finally {
			request.setAttribute("result", result);		
		}
		CommUtils.getIntervalTime(start, new Date(), href);
		return mapping.findForward("queryCheckInfo");

	}
	public ActionForward updateCheckInfo(ActionMapping mapping, ActionForm actionForm,HttpServletRequest request,HttpServletResponse response) {
		Result result = new Result();
		String apkPath = request.getParameter("downloadPath");
		String belongProject = request.getParameter("project");
		try{
			if("".equals(CommUtils.getSubStr(apkPath, 2))){
				apkPath = "http://" + getServerName() +":"+request.getServerPort()+ request.getContextPath() + "/upload/apk/" + belongProject + "/"+apkPath;
			}else{
				apkPath = "http://" + getServerName()+":"+request.getServerPort()+ request.getContextPath() + "upload/apk/"+ belongProject + "/" + CommUtils.getSubStr(apkPath, 2);
			}
			CheckInfoForm form = (CheckInfoForm)actionForm;
			CheckInfo vo = new CheckInfo();
			BeanUtils.copyProperties(vo,form);
			String interPath = "";
			Hashtable<?, ?> files = form.getMultipartRequestHandler().getFileElements();//获取所有文件路径的枚举；
			if (files != null & files.size() > 0) {
				Enumeration<?> enums = files.keys();
				String fileKey = null;
				String path = "";		
				String dir = request.getSession(true).getServletContext().getRealPath("/upload/apk/"+belongProject);
				while (enums.hasMoreElements()) {
					fileKey = (String) (enums.nextElement());
					FormFile file = (FormFile) files.get(fileKey);
					String name = file.getFileName();
					if (name != null && !"".equals(name.trim())) {
						CommUtils.createDateFile(dir); //创建当前文件夹，存在则返回文件名；
						InputStream in = file.getInputStream();
						path =  dir + "/" + name;   //输出文件路径
						File f = new File(path);
						if(f.exists()){
						   f.delete();	
						}
						interPath = "http://" + getServerName()+":"+request.getServerPort()+ request.getContextPath() + "/upload/apk/"+belongProject + "/"  + name;
						vo.setDownloadPath(interPath);  
						OutputStream out = new FileOutputStream(path);
						out.write(file.getFileData(), 0, file.getFileSize());
						in.close();
						in = null;
						out.close();
						out = null;
					}
				}
				String dir2 = request.getSession(true).getServletContext().getRealPath("/upload/temp")+"/"+CommUtils.getSubStr(apkPath, 1);//要删除文件的路径；
				File tempFile = new File(dir2);
				if(tempFile.exists()){
					tempFile.delete();
				}
				File temp = new File(request.getSession(true).getServletContext().getRealPath("/upload/temp"));
				if(temp.exists()){
					temp.delete();
				}
			}
			vo.setCondition("belong_project='"+belongProject+"'");
			if(ServiceBean.getInstance().getCheckInfoFacade().getCheckInfo(vo).size() > 0){
				
				ServiceBean.getInstance().getCheckInfoFacade().updateCheckInfo(vo);
			}else{
				vo.setBelongProject(belongProject);
				ServiceBean.getInstance().getCheckInfoFacade().insertCheckInfo(vo);
			}
			result.setBackPage(HttpTools.httpServletPath(request,"queryCheckInfo"));
			result.setResultCode("save");
			result.setResultType("success");
		}catch(Exception e){
			e.printStackTrace();
			logger.debug(request.getQueryString() + "  " + e);
			result.setBackPage(HttpTools.httpServletPath(request,"queryCheckInfo"));
			if(e instanceof SystemException){/*对已知异常进行解析*/
				result.setResultCode(((SystemException)e).getErrCode());
				result.setResultType(((SystemException)e).getErrType());
			}else{/*对未知异常进行解析，并全部定义成未知异常*/
				result.setResultCode("noKnownException");
				result.setResultType("sysRunException");
			}
		}finally {
			request.setAttribute("result", result);
		}
		return mapping.findForward("result");
	}
	
	public ActionForward getApkMessage(ActionMapping mapping, ActionForm actionForm,HttpServletRequest request,HttpServletResponse response) {
		CheckInfoForm form=(CheckInfoForm)actionForm;
		String apk = request.getParameter("downloadPath");
		FormFile file=form.getFile1();   //iframe是隐藏窗口，实现文件上传功能,而ajax只是刷新局部，不能实现上传功能
		
		try {
			String dir = request.getSession(true).getServletContext().getRealPath("/upload/apk");
			String tempPath = dir.replace("apk", "temp");
			File temp = new File(tempPath);
			temp.mkdir();
			if(apk != null && !"".equals(apk)){
				String delPath = tempPath + "/"+CommUtils.getSubStr(apk, 1);
				File f = new File(delPath);
				if(f.exists()){
					f.delete();
				}
			}		
			String filename = file.getFileName();

			String path = tempPath + "/" + filename;
			OutputStream fos = new FileOutputStream(path);   //这是必须有的，只有这样才把apk输出到upload上
			fos.write(file.getFileData(), 0, file.getFileSize());
			fos.flush();
			fos.close();
			
			ApkUtil apkUtil = new ApkUtil();			
			String anOSName = System.getProperty("os.name");
			if(anOSName.toLowerCase().startsWith("windows")){
			apkUtil.setmAaptPath(request.getSession(true).getServletContext().getRealPath("/WEB-INF") + "/lib/aapt.exe");
			}else{
				apkUtil.setmAaptPath(request.getSession(true).getServletContext().getRealPath("/WEB-INF") + "/lib/aapt");
			}
			com.sinaapp.msdxblog.apkUtil.entity.ApkInfo apkInfo = apkUtil.getApkInfo(path);
			
			String backMessage=apkInfo.getVersionName()+"@"+apkInfo.getPackageName()+"@"+apkInfo.getVersionCode()+"@"+filename;
			response.getWriter().write("<script>parent.callback('"+backMessage+"');</script>");  //iframe是子窗口,回传参数给父窗口,用parent
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	public ActionForward downloadApk(ActionMapping mapping, ActionForm actionForm,HttpServletRequest request,HttpServletResponse response) throws Exception{
		Result result = new Result();
		boolean isOnLine = true;
		try {
			String downloadUrl = request.getParameter("download");
			String belongProject = request.getParameter("project");
			
			String dir = request.getSession(true).getServletContext().getRealPath("/upload/apk/" + belongProject );
			String apkname = downloadUrl.substring(downloadUrl.lastIndexOf("/")+1);
			
			 File f = new File(dir+"/"+apkname);		 
		        if (!f.exists()) {
		            throw new SystemException("fail","noAPKPath");
		        }
		        FileInputStream fin = new FileInputStream(f);
		        BufferedInputStream br = new BufferedInputStream(fin);
		        byte[] buf = new byte[1024*8];
		        int len = 0;

		        response.reset(); 
		        if (!isOnLine) { 
		            URL u = new URL("file:///" + dir);
		            response.setContentType(u.openConnection().getContentType());
		            response.setHeader("Content-Disposition", "inline; filename=" + apkname);
		            // 文件名应该编码成UTF-8
		        } else { // 纯下载方式
		            response.setContentType("application/x-msdownload");
		            response.setHeader("Content-Disposition", "attachment; filename=" + f.getName());
		        }
		        OutputStream out = response.getOutputStream();
		        while ((len = br.read(buf)) > 0)
		            out.write(buf, 0, len);
		        br.close();
		        out.close();
		        return null;
		}catch (Exception e) {
			e.printStackTrace();
			result.setBackPage(HttpTools.httpServletPath(request,"queryCheckInfo"));
			if (e instanceof SystemException) { /* 对已知异常进行解析 */
				result.setResultCode(((SystemException) e).getErrCode());
				result.setResultType(((SystemException) e).getErrType());
			} else { /* 对未知异常进行解析，并全部定义成未知异常 */
				result.setResultCode("noKnownException");
				result.setResultType("sysRunException");
			}
		}finally {
			request.setAttribute("result", result);				
			}
		return mapping.findForward("result");
	}
	public String getServerName() throws Exception {
		String serverName = "";
		Properties pros = new Properties();
		pros.load(this.getClass().getClassLoader().getResourceAsStream("server.properties"));
		serverName = pros.getProperty("servername");
		return serverName;
	}
	
	public ActionForward getCheckInfo(ActionMapping mapping, ActionForm actionForm,HttpServletRequest request,HttpServletResponse response) {
		CheckInfoFacade info = ServiceBean.getInstance().getCheckInfoFacade();
		String belongProject = request.getParameter("belongProject");
		List<DataMap> list = null;
		try{
			CheckInfoForm form = (CheckInfoForm)actionForm;
			CheckInfo vo = new CheckInfo();
			BeanUtils.copyProperties(vo,form);
			if(belongProject != null && !"".equals(belongProject)){
				vo.setCondition("belong_project='"+belongProject+"'");
			}
			list = info.getCheckInfo(vo);
			/*设置化排序字段*/
			String result = "";
			if(list.size() > 0){
				result = list.get(0).getAt("version_name") 
				+ "@" + list.get(0).getAt("package_name") 
				+ "@" + list.get(0).getAt("version_code") 
				+ "@" + list.get(0).getAt("function_cap") 
				+ "@" + list.get(0).getAt("download_path");
			}
			response.getWriter().write(result);
		}catch(Exception e){
				e.printStackTrace();
				
			}
		return null;
	}

}